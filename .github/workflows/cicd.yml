name: CI/CD Pipeline

on:
  push:
    branches: ["develop", "qa", "main"]
  pull_request:
    branches: ["develop", "qa", "main"]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Lint with Trunk
        run: yarn lint
      - name: Run tests
        run: yarn test
      - name: Ensure ESLint rules pass
        run: npx eslint . --max-warnings=0

  deploy-to-qa:
    name: Deploy to QA
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Deploy to QA branch
        run: |
          # Ensure we're on develop branch
          git checkout develop

          # Create or update qa branch with develop content
          git checkout -B qa

          # Push to qa branch, force push to ensure qa always matches develop
          git push origin qa --force

  test-qa:
    name: Test QA Environment
    needs: deploy-to-qa
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: qa

      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run QA validation tests
        run: |
          yarn lint
          yarn test
          # Additional QA specific tests could go here

  deploy-to-main:
    name: Deploy to Main
    needs: test-qa
    if: github.ref == 'refs/heads/qa' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Deploy to Main branch
        run: |
          # Ensure we're on qa branch
          git checkout qa

          # Create PR to main instead of direct push (safer option)
          # This requires a GitHub token with appropriate permissions
          # Using GitHub CLI to create the PR
          gh pr create --base main --head qa --title "Deploy QA to Production" --body "Automated PR to deploy QA changes to Production"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This job only runs when code is pushed to main
  # It could include your production deployment steps
  production-deploy:
    name: Production Deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build for production
        run: yarn build --if-present

      # Add your production deployment steps here
      # For example, deploying to Expo, App Store, Google Play, etc.
      - name: Example production deployment step
        run: echo "Deploying to production..."
